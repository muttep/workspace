T1 - Even : 2 4 6 8
T2 - Odd  : 1 3 5 7 9
O/P - 1 2 3 4 5 6 7 8 9

int counter=1;
int MAX=10;
pthread_mutext_t lock;

void evenCallback(void)
{
	for(int i=0;i<MAX;i++) {
		if((counter % 2) == 0) {
			pthread_mutext_lock(&lock);
			pthread_mutext_wait(signal,lock);
			cout<<counter;
			counter++;
			pthread_mutext_unlock(&lock);
			pthread_mutext_signal(lock);
		}
	}
}

void oddCallback(void)
{
	for(int i=0;i<MAX;i++) {
		if((counter % 2) != 0) {
			pthread_mutext_lock(&lock);
			pthread_mutext_wait(signal,lock);
			cout<<counter;
			counter++
			pthread_mutext_unlock(&lock);
			pthread_mutext_signal(lock);
		}
	}
}

int main()
{
	pthreads_t t1,t2;
	

	pthread_create(&t1,NULL,evenCallback,NULL);
	pthread_create(&t1,NULL,oddCallback,NULL);

	pthread_join(t1,NULL);
	pthread_join(t1,NULL);

	return 0;
}
